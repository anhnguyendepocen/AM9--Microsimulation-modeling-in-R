
############  Microsimulation Sick-Sicker model ##########
# Includes: 
# individual characteristicss: age
# age dependent mortality probabilities 
# individual treatment effect modifyer 
################################################################################

# Developed by the Decision Analysis in R for Technologies in Health (DARTH) group
# Fernando Alarid-Escudero, PhD (1) 
# Eva A. Enns, MS, PhD (1)	
# M.G. Myriam Hunink, MD, PhD (2,3)
# Hawre J. Jalal, MD, PhD (4) 
# Eline M. Krijkamp, MSc (2)
# Petros Pechlivanoglou, PhD (5) 

# In collaboration of: 		
# 1 University of Minnesota School of Public Health, Minneapolis, MN, USA
# 2 Erasmus MC, Rotterdam, The Netherlands
# 3 Harvard T.H. Chan School of Public Health, Boston, USA
# 4 University of Pittsburgh Graduate School of Public Health, Pittsburgh, PA, USA
# 5 The Hospital for Sick Children, Toronto and University of Toronto, Toronto ON, Canada

################################################################################
# Please cite our publications when using this code:
# darthworkgroup.com
# Krijkamp EM, Alarid-Escudero F, Enns EA, Jalal HJ, Hunink MGM, Pechlivanoglou P. 
# Microsimulation modeling for health decision sciences using R: A tutorial. 
# Med Decis Making. 2018;38(3):400-422.
# See GitHub for more information or code updates
# https://github.com/DARTH-git/Microsimulation-tutorial
################################################################################
# Copyright 2017, 
# THE HOSPITAL FOR SICK CHILDREN AND THE COLLABORATING INSTITUTIONS. 
# All rights reserved in Canada, the United States and worldwide.  
# Copyright, trademarks, trade names and any and all associated intellectual property
# are exclusively owned by THE HOSPITAL FOR SICK CHILDREN and the collaborating 
# institutions and may not be used, reproduced, modified, distributed or adapted 
# in any way without appropriate citation.
################################################################################

rm(list =ls()) # clear memory (removes all the variables from the workspace)

setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set working directory to the folder where the file is saved 

#### 01 Load packages ####
library(dplyr) # load dplyr including the useful inner_join function
library(dampack) # for CEA, PSA, and visualization
library(matlab)

#### 02 Load Functions ####
source("Functions.R")


#### 03 Input Model Parameters ####
set.seed(1)                    # set the seed  

# Model structure 
n_t   <- 30                    # time horizon, 30 cycles
n_i   <- 100000                # number of simulated individuals
v_n   <- c("H","S1","S2","D")  # the model states names
n_s   <- length(v_n)           # the number of health states
d_r   <- 0.03                  # discount rate of 3% per cycle
v_dwe <- v_dwc <- 1 / ((1 + d_r) ^ (0:n_t))   # discount weight 
v_names_str <- c("no treatment", "treatment") # strategy names

# Event probabilities (per cycle)
## Annual transition probabilities
p_HS1   <- 0.15                # probability of becoming sick when healthy
p_S1H   <- 0.5                 # probability of recovering to healthy when sick
p_S1S2  <- 0.105               # probability of becoming sicker when sick

## Annual probabilities of death
p_mort   <- read.csv("mortProb_age.csv")        # load age dependent probability
dist_Age <- read.csv("MyPopulation-AgeDistribution.csv") # load age distribution

p_S1D    <- 0.0149          # probability to die in S1 by cycle 
p_S2D    <- 0.048           # probability to die in S2

# Cost inputs
c_H     <- 2000             # cost of one cycle in the healthy state
c_S1    <- 4000             # cost of one cycle in the sick state
c_S2    <- 15000            # cost of one cycle in the sicker state
c_D     <- 0                # cost of one cycle in the dead state
c_Trt   <- 12000            # cost of treatment (per cycle)

# Utility inputs
u_H     <- 1                # utility when healthy 
u_S1    <- 0.75             # utility when sick 
u_S2    <- 0.5              # utility when sicker
u_D     <- 0                # utility when dead
u_Trt   <- 0.95             # utility when sick(er) and being treated


#### 04 Sample individual level characteristics ####
#### 04.1 Static characteristics ####
v_x      <- runif(n_i, min = 0.95, max = 1.05) # treatment effect modifier at baseline                                         
v_age0   <- sample(x = dist_Age$age, prob = dist_Age$prop, size = n_i, replace = TRUE) # sample from age distribution an initial age for every individual
df_X     <- data.frame(ID = 1:n_i, x = v_x, Age = v_age0)

#### 04.2 Dynamic characteristics 
# Specify the initial health state of the individuals 
# everyone begins in the healthy state (in this example)
v_M_init  <- rep("H", n_i)       # a vector with the initial health state for all individuals 


#### 05 Define Simulation Functions ####
#### 05.1 Probability function ####
# The Probs function that updates the transition probabilities of every cycle is shown below.

Probs <- function(M_t, df_X, t) { 
  # Arguments:
  # M_t: health state occupied by individual i at cycle t (character variable)
  # df_X: dataframe with individual caracteristics 
  # t:     current cycle 
# Returns: 
  #   transition probabilities for that cycle
    
  m_p_t           <- matrix(0, nrow = n_s, ncol = n_i)  # create matrix of state transition probabilities
  rownames(m_p_t) <-  v_n                               # give the state names to the rows
  
  # lookup baseline probability and rate of dying based on individual characteristics
  p_HD_all <- dplyr::inner_join(df_X, p_mort, by = c("Age"))

  p_HD     <- p_HD_all[M_t == "H","p_HD"]
  
  # update the v_p with the appropriate probabilities   
  m_p_t[, M_t == "H"]  <- rbind(1 - p_HS1 - p_HD, p_HS1, 0, p_HD)      # transition probabilities when healthy
  m_p_t[, M_t == "S1"] <- rbind(p_S1H, 1 - p_S1H - p_S1S2 - p_S1D, p_S1S2, p_S1D)  # transition probabilities when sick
  m_p_t[, M_t == "S2"] <- c(0, 0, 1 - p_S2D, p_S2D)                                            # transition probabilities when sicker
  m_p_t[, M_t == "D"]  <- c(0, 0, 0, 1)                                                        # transition probabilities when dead   
  return(t(m_p_t))
  }       

#### 05.2 Cost function ####
# The Costs function estimates the costs at every cycle.

Costs <- function (M_t, Trt = FALSE) {
  # M_t: health state occupied by individual i at cycle t (character variable)
  # Trt:  is the individual being treated? (default is FALSE) 
# Returns: 
  #   costs for that cycle
  c_t <- 0                                  # by default the cost for everyone is zero 
  c_t[M_t == "H"]  <- c_H                  # update the cost if healthy
  c_t[M_t == "S1"] <- c_S1 + c_Trt * Trt   # update the cost if sick conditional on treatment
  c_t[M_t == "S2"] <- c_S2 + c_Trt * Trt   # update the cost if sicker conditional on treatment
  c_t[M_t == "D"]  <- c_D                  # update the cost if dead
  
  return(c_t)        		                   # return the costs
}

#### 05.3 Health outcome function ####
# The Effs function to update the utilities at every cycle.

Effs <- function (M_t, df_X, Trt = FALSE, cl = 1) {
   # M_t: health state occupied by individual i at cycle t (character variable)
   # df_X: dataframe with individual characteristics including Age, Sex and the effect modifier of the treatment effect
  # Trt:  is the individual treated? (default is FALSE) 
  # cl:   cycle length (default is 1)
  # Returns: 
  #   effects for that cycle
  
  u_t <- 0                                        # by default the utility for everyone is zero
  u_t[M_t == "H"]  <- u_H                        # update the utility if healthy
  u_t[M_t == "S1" & Trt == FALSE] <- u_S1        # update the utility if sick
  u_t[M_t == "S1" & Trt == TRUE]  <- u_Trt * df_X$x[M_t == "S1"]  # update the utility if sick but on treatment (adjust for individual effect modifier) 
  u_t[M_t == "S2"] <- u_S2                       # update the utility if sicker
  u_t[M_t == "D"]  <- u_D                        # update the utility if dead
  
  QALYs <-  u_t * cl            # calculate the QALYs during cycle t
  return(QALYs)                  # return the QALYs
}


#### 06 Run Microsimulation ####
MicroSim <- function(n_i, df_X, Trt = FALSE, seed = 1) {
# Arguments:  
  # n_i:     number of individuals
  # df_X     data frame with individual data 
  ## Age      age of the individuals
  ## Sex      sex of the indivuduals 
  ## x        treatment effect modifier  
  # Trt:     is this the individual receiving treatment? (default is FALSE)
  # seed:    default is 1
  
  set.seed(seed) # set the seed
  
  n_s <- length(v_n) # the number of health states
  
  # create three matrices called m_M, m_C and m_E
  # number of rows is equal to the n_i, the number of columns is equal to n_t  (the initial state and all the n_t cycles)
  # m_M is used to store the health state information over time for every individual
  # m_C is used to store the costs information over time for every individual
  # m_E is used to store the effects information over time for every individual
  
  m_M <- m_C <- m_E <- m_Ts <-  matrix(nrow = n_i, ncol = n_t + 1, 
                                     dimnames = list(paste("ind"  , 1:n_i, sep = " "), 
                                                     paste("cycle", 0:n_t, sep = " ")))  

    m_M [, 1] <- v_M_init    # initial health state at cycle 0 for individual i
    
    m_C[, 1]  <- Costs(m_M[, 1], Trt)         # calculate costs per individual during cycle 0
    m_E[, 1]  <- Effs (m_M[, 1], df_X, Trt)   # calculate QALYs per individual during cycle 0
    
    # open a loop for time running cycles 1 to n_t 
    for (t in 1:n_t) {
      v_p <- Probs(m_M[, t], df_X, t)                   # calculate the transition probabilities for the cycle based on  health state t
      m_M[, t + 1]  <- samplev(v_p, 1)                  # sample the current health state and store that state in matrix m_M 
      m_C[, t + 1]  <- Costs(m_M[, t + 1], Trt)         # calculate costs per individual during cycle t + 1
      m_E[, t + 1]  <- Effs(m_M[, t + 1], df_X, Trt)    # calculate QALYs per individual during cycle t + 1
      
      df_X$Age[m_M[, t + 1] != "D"]  <- df_X$Age[m_M[, t + 1] != "D"] + 1 # update the age of individuals that are alive
    
      # Display simulation progress
      if(t/(n_t/10) == round(t/(n_t/10), 0)) { # display progress every 10%
        cat('\r', paste(t/n_t * 100, "% done", sep = " "))
      }
      
    } # close the loop for the time points 
  
  # calculate  
  tc <- m_C %*% v_dwc    # total (discounted) cost per individual
  te <- m_E %*% v_dwe    # total (discounted) QALYs per individual 
  tc_hat <- mean(tc)     # average (discounted) cost 
  te_hat <- mean(te)     # average (discounted) QALYs
  
  # store the results from the simulation in a list
  results <- list(m_M = m_M, m_C = m_C, m_E = m_E, tc = tc , te = te, tc_hat = tc_hat, te_hat = te_hat)   
  return(results)  # return the results
} # end of the MicroSim function  

# By specifying all the arguments in the `MicroSim()` the simulation can be started
# In this example the outcomes are of the simulation are stored in the variables `outcomes_no_tr` and `outcomes_trt`.

# Run the simulation for both no treatment and treatment options
tic()
outcomes_no_trt  <- MicroSim(n_i, df_X, Trt = FALSE, seed = 1)
outcomes_trt     <- MicroSim(n_i, df_X, Trt = TRUE,  seed = 1)
toc()

#### 07 Visualize results ####
options(scipen = 999)

### No treatment
plot(density(outcomes_no_trt$tc), main = paste("Total cost per person"), xlab = "Cost ($)")
plot(density(outcomes_no_trt$te), main = paste("Total QALYs per person"), xlab = "QALYs")

plot_m_TR(outcomes_no_trt$m_M)    # health state trace

### Treatment
plot(density(outcomes_trt$tc), main = paste("Total cost per person"), xlab = "Cost ($)")
plot(density(outcomes_trt$te), main = paste("Total QALYs per person"), xlab = "QALYs")

plot_m_TR(outcomes_trt$m_M)    # health state trace


#### 08 Cost Effectiveness Analysis ####
# store the mean costs of each strategy in a new variable C (vector of costs)
v_C <- c(outcomes_no_trt$tc_hat, outcomes_trt$tc_hat)
# store the mean QALYs of each strategy in a new variable E (vector of effects)
v_E <- c(outcomes_no_trt$te_hat, outcomes_trt$te_hat)

# use dampack to calculate the ICER
calculate_icers(cost       = v_C,
                effect     = v_E,
                strategies = v_names_str)

